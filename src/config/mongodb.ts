/* eslint-disable no-console */
import { MongoClient, ServerApiVersion, Db } from 'mongodb';
import { env } from './environment';

// Type definitions
interface MongoConfig {
  serverApi: {
    version: ServerApiVersion;
    strict: boolean;
    deprecationErrors: boolean;
  };
}

// Database instance with proper typing
let shopDatabaseInstance: Db | null = null;

// MongoDB client configuration
const mongoConfig: MongoConfig = {
  serverApi: {
    version: ServerApiVersion.v1,
    strict: true,
    deprecationErrors: true
  }
};

const mongoClientInstance: MongoClient = new MongoClient(env.MONGODB_URI, mongoConfig);

/**
 * K·∫øt n·ªëi t·ªõi MongoDB Atlas
 * @returns Promise<void>
 */
export const CONNECT_DB = async (): Promise<void> => {
  try {
    // G·ªçi k·∫øt n·ªëi t·ªõi MongoDB Atlas v·ªõi URI ƒë√£ khai b√°o trong th√¢n c·ªßa mongoClientInstance
    await mongoClientInstance.connect();

    // K·∫øt n·ªëi th√†nh c√¥ng th√¨ l·∫•y ra Database theo t√™n v√† g√°n ng∆∞·ª£c n√≥ l·∫°i v√†o bi·∫øn
    // shopDatabaseInstance ·ªü tr√™n
    shopDatabaseInstance = mongoClientInstance.db(env.DATABASE_NAME);
    console.log(`‚úÖ K·∫øt n·ªëi th√†nh c√¥ng t·ªõi database: ${env.DATABASE_NAME}`);
  } catch (error) {
    console.error('‚ùå L·ªói k·∫øt n·ªëi MongoDB:', error);
    throw error;
  }
};

/**
 * ƒê√≥ng k·∫øt n·ªëi t·ªõi database khi c·∫ßn
 * @returns Promise<void>
 */
export const CLOSE_DB = async (): Promise<void> => {
  try {
    console.log('üîå ƒêang ƒë√≥ng k·∫øt n·ªëi database...');
    await mongoClientInstance.close();
    shopDatabaseInstance = null;
    console.log('‚úÖ ƒê√£ ƒë√≥ng k·∫øt n·ªëi database th√†nh c√¥ng');
  } catch (error) {
    console.error('‚ùå L·ªói khi ƒë√≥ng k·∫øt n·ªëi:', error);
    throw error;
  }
};

/**
 * L·∫•y instance c·ªßa database
 * @returns Db instance
 * @throws Error n·∫øu ch∆∞a k·∫øt n·ªëi database
 */
export const GET_DB = (): Db => {
  if (!shopDatabaseInstance) {
    throw new Error('Must connect to Database first!');
  }
  return shopDatabaseInstance;
};